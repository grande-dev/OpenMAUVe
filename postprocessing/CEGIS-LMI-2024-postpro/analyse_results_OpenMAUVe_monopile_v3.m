% author: Davide Grande
% 27/04/2021
%
%
% README:
% This script is used to import the results data from an OpenMAUVe simulation
% and plot the variables of interest, such as the states, the control references,
% the forces generated by the actuators and the actuator efficiency (i.e.
% faults).
%
% Given an instantiated object called "generic_AUV_3d", 
% the data of the object is stored in a .csv file as: "data.generic_AUV_3d.u" . 
% To access this data, bare in mind that "." are substituted with "_"
%
%
% How to start me:
% 1) select the length of the simulation (e.g. 350 seconds) in 'end_sim'.
% 2) 'zoom_time' produces a zoomed plots of the first 'zoom_time' [seconds]
% 3) choose if actuator saturation is used ('is_sat_used')
%
% Limitations of running this .m script:
% 1) Saving of the LAST figure before invoking 'saveOpenFigures_v3()' never
% works. The figure gets replaced by the first figure (the title is correct, 
% but the content is not).
% To fix: after finishing saving all the figures, closed them all,
% (manually) generate the last figure again, and manually call
% saveOpenFigures_v3().
%
% 2) Figures with subfigures cannot be saved with 'saveOpenFigures_v3()'.
% To fix: generate the figures and save it manually in the format you want.
%

clear all
close all
clc

%% Parameters setup
csv_results_file = 'Glider_Lib.Simulations.TestAUV_5d_CEGIS_LMI_monopile_v3/TestAUV_5d_CEGIS_LMI_monopile_res.csv'; 
saving_results_path = strcat(pwd, '/Results/res_v17');
mkdir './Results/res_v17'

is_sat_used = true; % are you employing actuator saturation?
sat_act = 38.0; % saturation of actuators
end_sim = 2295; % end of simulation [s]
zoom_time = 50; % produced magnified plot up to 'zoom_time' [s]
hide_titles = true;

%% Loading the result file
data = readtable(csv_results_file);

%% Reading the data
ref_x1 = data.orbit_following_segments_ref_u;
ref_x2 = data.orbit_following_segments_ref_v;
ref_x3 = data.orbit_following_segments_ref_v.*0; % for some reason, the ref_x3_x5 block does not exist in the dataset. Maybe because it is all zeros?
ref_x4 = data.orbit_following_segments_ref_yaw;
ref_x5 = data.orbit_following_segments_ref_v.*0; % for some reason, the ref_x3_x5 block does not exist in the dataset. Maybe because it is all zeros?

u = data.generic_AUV_3d_out_lin_vel_u; % state x1
v = data.generic_AUV_3d_out_lin_vel_v; % state x2
w = data.generic_AUV_3d_out_lin_vel_w;

p = data.generic_AUV_3d_out_ang_vel_p;
q = data.generic_AUV_3d_out_ang_vel_q;
r = data.generic_AUV_3d_out_ang_vel_r; % state x3

pos_x = data.generic_AUV_3d_out_pos_x;
pos_y = data.generic_AUV_3d_out_pos_y;
pos_z = data.generic_AUV_3d_out_pos_z;

phi = data.generic_AUV_3d_out_angles_DCM_1_;
theta = data.generic_AUV_3d_out_angles_DCM_2_;
psi = data.generic_AUV_3d_out_angles_DCM_3_; % state x4


% Command inputs
u1 = data.generic_AUV_3d_F1;
u2 = data.generic_AUV_3d_F2;
u3 = data.generic_AUV_3d_F3;
u4 = data.generic_AUV_3d_F4;

% actuator efficiency
h1 = data.faultInjection_4thrusters_h_1;
h2 = data.faultInjection_4thrusters_h_2;
h3 = data.faultInjection_4thrusters_h_3;
h4 = data.faultInjection_4thrusters_h_4;

% waypoint info
gamma = 1.5;
x_wp = [20,      25,      35,      40,       35,       25,    20];
y_wp = [30, 21.3397, 21.3397,      30,  38.6603,  38.6603,    30];
z_wp = [ 0,       0,       0,       0,        0,        0,     0];
h_c = 40;  % height monopile
c_c=[30,30,h_c];  % location of the monopile
r_c = 4.5; % radius of the monopile
assumed_operational_depth = -h_c/2; %[m]
z_lim_operation = [-assumed_operational_depth, 0];

% Actuators data
time = data.time;

%% Plotting 

% 1) Velocities
%% surge speed
figure;
plot(time, u,'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[m/s]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, ref_x1, '--', 'linewidth', 1.5);
legend('$u$','$u^\star$', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Surge speed ($u$)','Interpreter','Latex');
xlim([0 end_sim])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

figure;
plot(time, u,'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[m/s]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, ref_x1, '--', 'linewidth', 1.5);
legend('$u$','$u^\star$', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Surge speed ($u$) zoom','Interpreter','Latex')
xlim([0 zoom_time])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

%% sway speed
figure;
plot(time, v,'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[m/s]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, ref_x2, '--', 'linewidth', 1.5);
legend('$v$','$v^\star$','Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Sway speed ($v$)','Interpreter','Latex')
xlim([0 end_sim])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

figure;
plot(time, v,'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[m/s]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, ref_x2, '--', 'linewidth', 1.5);
legend('$v$','$v^\star$','Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Sway speed ($v$) zoom','Interpreter','Latex')
xlim([0 zoom_time])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

%% angular rate
figure;
plot(time, r,'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[rad/s]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, ref_x3, '--', 'linewidth', 1.5);
legend('$r$','$r^\star$','Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Angular rate ($r$)','Interpreter','Latex')
xlim([0 end_sim])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


figure;
plot(time, r,'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[rad/s]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, ref_x3, '--', 'linewidth', 1.5);
legend('$r$','$r^\star$','Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Angular rate ($r$) zoom','Interpreter','Latex')
xlim([0 zoom_time])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


%% psi [deg]
figure;
plot(time, rad2deg(psi),'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[deg]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, rad2deg(ref_x4), '--', 'linewidth', 1.5);
legend('$\psi$','$\psi^\star$','Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Yaw angle ORIGINAL','Interpreter','Latex')
xlim([0 end_sim])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


%% Psi corrected! Removed spike

psi_ref_corrected = ref_x4;
psi_ref_corrected(135598)=4.7124;

figure;
plot(time, rad2deg(psi),'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[deg]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, rad2deg(psi_ref_corrected), '--', 'linewidth', 1.5);
legend('$\psi$','$\psi^\star$','Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Yaw angle','Interpreter','Latex')
xlim([0 end_sim])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

figure;
plot(time, rad2deg(psi),'linewidth', 1.5);
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[deg]$','Interpreter','Latex','FontSize', 15);
hold on 
plot(time, rad2deg(ref_x4), '--', 'linewidth', 1.5);
legend('$\psi$','$\psi^\star$','Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Yaw angle zoom','Interpreter','Latex')
xlim([0 zoom_time])
grid on;
set(gcf,'color','w');
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


%% Forces
figure;
plot(time, u1,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u1*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u1*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_1$)','Interpreter','Latex')
grid on;
legend('$F_1$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 end_sim])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


figure;
plot(time, u1,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u1*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u1*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_1$) zoom','Interpreter','Latex')
grid on;
legend('$F_1$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 zoom_time])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


figure;
plot(time, u2,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u2*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u2*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_2$)','Interpreter','Latex')
grid on;
legend('$F_2$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 end_sim])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


figure;
plot(time, u2,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u2*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u2*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_2$) zoom','Interpreter','Latex')
grid on;
legend('$F_2$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 zoom_time])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


figure;
plot(time, u3,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u3*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u3*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_3$)','Interpreter','Latex')
grid on;
legend('$F_3$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 end_sim])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


figure;
plot(time, u3,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u3*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u3*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_3$) zoom','Interpreter','Latex')
grid on;
legend('$F_3$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 zoom_time])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

figure;
plot(time, u4,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u4*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u4*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_4$)','Interpreter','Latex')
grid on;
legend('$F_4$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 end_sim])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


figure;
plot(time, u4,'linewidth', 1.5);
hold on 
if is_sat_used
    plot(time, u4*0+sat_act,'r', 'linewidth', 1.5);
    hold on 
    plot(time, u4*0-sat_act,'r', 'linewidth', 1.5);
end
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$[N]$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
titleHandle = title('Control force ($F_4$) zoom','Interpreter','Latex')
grid on;
legend('$F_4$','actuator saturation', 'Interpreter','Latex','FontSize', 13, 'Location', 'Best')
set(gcf,'color','w');
xlim([0 zoom_time])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

%% Extracting values of faults
h1_f_on = 1;
h1_f_off = 1;
f1_found = false; 
stop_f1 = false;

h2_f_on = 1;
h2_f_off = 1;
f2_found = false; 
stop_f2 = false;

h3_f_on = 1;
h3_f_off = 1;
f3_found = false; 
stop_f3 = false;

h4_f_on = 1;
h4_f_off = 1;
f4_found = false; 
stop_f4 = false;

for iF=1:size(h1)
    % faults happening
    if h1(iF)==0 & ~f1_found
        h1_f_on=iF;
        f1_found = true;
    end
    
    if h2(iF)==0 & ~f2_found
        h2_f_on=iF;
        f2_found = true;
    end

    if h3(iF)==0 & ~f3_found
        h3_f_on=iF;
        f3_found = true;
    end
    
    if h4(iF)==0 & ~f4_found
        h4_f_on=iF;
        f4_found = true;
    end

    % faults resolved
    if h1(iF)==1 & f1_found & ~stop_f1
        h1_f_off=iF;
        stop_f1 = true;
    end

    if h2(iF)==1 & f2_found & ~stop_f2
        h2_f_off=iF;
        stop_f2 = true;
    end

    if h3(iF)==1 & f3_found & ~stop_f3
        h3_f_off=iF;
        stop_f3 = true;
    end

    if h4(iF)==1 & f4_found & ~stop_f4
        h4_f_off=iF;
        stop_f4 = true;
    end

end



%% position
figure;
plot(pos_y, pos_x, 'linewidth', 1.5);
titleHandle = title('Horizontal plane','Interpreter','Latex')
grid on;
ylabel('$x\ [m]$','Interpreter','Latex','FontSize', 15);
xlabel('$y\ [m]$','Interpreter','Latex','FontSize', 15);
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 

%% 3D plot - path with faults
alpha_waypoints = 0.5;
alpha_value_faults = 0.3;
rgb_monopile = [0.6510,  0.6510,  0.6510];  % grey - uisetcolor
rgb_waypoints = [0.0745,    0.6235,    1.0000]; % green [0.2667,    0.6784,    0.1137] %% light blue [0.0745    0.6235    1.0000]
rgb_faults = [0.3010, 0.7450, 0.9330];
rgb_faults_resolved = [0.2667,    0.6784,    0.1137];
rgb_auv=[0.8588    0.5961    0.1961];
rgb_green = [0.2667,    0.6784,    0.1137];
rgb_yellow=[1, 1, 0];
radius_faults = 30;
radius_waypoint=gamma*490;

f = figure;

% draw monopile
r = r_c; n = 100;   
[X,Y,Z] = cylinder(r);
X = X+c_c(1); Y = Y+c_c(2); Z = Z*h_c - c_c(3);
surf(X,Y,Z,'facecolor',rgb_monopile,'LineStyle','none', 'FaceAlpha',0.4, 'HandleVisibility', 'off'); %[0.6510  0.6510  0.6510]
hold on
fill3(X(1,:),Y(1,:),Z(1,:),rgb_monopile, 'HandleVisibility', 'off') % this is the top "closing" element of the monopile
fill3(X(2,:),Y(2,:),Z(2,:),rgb_monopile, 'HandleVisibility', 'off') % this is the bottom "closing" element of the monopile
hold on; 

% plot path
p1 = plot3(pos_y(1:end), pos_x(1:end), pos_z(1:end)+assumed_operational_depth, 'linewidth', 1.5, 'HandleVisibility', 'on', 'Color', 'blue', 'DisplayName','AUV path'); % the swapping of x,y is intentional, compatible with the NED convention
titleHandle = title('Path','Interpreter','Latex')
grid on;
xlabel('$y\ [m]$','Interpreter','Latex','FontSize', 15);
ylabel('$x\ [m]$','Interpreter','Latex','FontSize', 15);
zlabel('$z\ [m]$','Interpreter','Latex','FontSize', 15);
hold on

% plot waypoints
p10 = plotWaypoint(y_wp, x_wp, z_wp+assumed_operational_depth, radius_waypoint, gamma, alpha_waypoints, rgb_waypoints, false); % the swapping of x,y is intentional, compatible with the NED convention
hold on
p11 = plotWaypoint(0, 0, 0+assumed_operational_depth, radius_waypoint, gamma, alpha_waypoints, rgb_waypoints, true);
hold on 

% plot faults
p2 = plotFaults(pos_y(h1_f_on), pos_x(h1_f_on), pos_z(h1_f_on)+assumed_operational_depth, '1', radius_faults, alpha_value_faults, rgb_faults, true, '$f_i: \phi_i = 0$');
p3 = plotFaults(pos_y(h2_f_on), pos_x(h2_f_on), pos_z(h2_f_on)+assumed_operational_depth, '2', radius_faults, alpha_value_faults, rgb_faults, false, '$\phi_2 = 0$');
p4 = plotFaults(pos_y(h3_f_on), pos_x(h3_f_on), pos_z(h3_f_on)+assumed_operational_depth, '3', radius_faults, alpha_value_faults, rgb_faults, false, '$\phi_3 = 0$');
p5 = plotFaults(pos_y(h4_f_on), pos_x(h4_f_on), pos_z(h4_f_on)+assumed_operational_depth, '4', radius_faults, alpha_value_faults, rgb_faults, false, '$\phi_4 = 0$');
p6 = plotFaultsResolved(pos_y(h1_f_off), pos_x(h1_f_off), pos_z(h1_f_off)+assumed_operational_depth, radius_faults, alpha_value_faults, rgb_faults_resolved, true, 'fault resolved');
p7 = plotFaultsResolved(pos_y(h2_f_off), pos_x(h2_f_off), pos_z(h2_f_off)+assumed_operational_depth, radius_faults, alpha_value_faults, rgb_faults_resolved, false, 'off');
p8 = plotFaultsResolved(pos_y(h3_f_off), pos_x(h3_f_off), pos_z(h3_f_off)+assumed_operational_depth, radius_faults, alpha_value_faults, rgb_faults_resolved, false, 'off');
p9 = plotFaultsResolved(pos_y(h4_f_off), pos_x(h4_f_off), pos_z(h4_f_off)+assumed_operational_depth, radius_faults, alpha_value_faults, rgb_faults_resolved, false, 'off');

% plot faults as red trajectories
p12 = plot3(pos_y(h1_f_on:h1_f_off), pos_x(h1_f_on:h1_f_off), pos_z(h1_f_on:h1_f_off)+assumed_operational_depth, ...
    'linewidth', 4.5, 'HandleVisibility', 'off', 'Color', 'red'); % the swapping of x,y is intentional, compatible with the NED convention
text(pos_y(h1_f_on)+gamma, ... %+(pos_y(h1_f_off)-pos_y(h1_f_on))/2+2*gamma, ...%pos_x(h1_f_on)+(pos_x(h1_f_off)-pos_x(h1_f_on))/2+2*gamma, ...
    pos_x(h1_f_on)+5, ...
    pos_z(h1_f_on)+assumed_operational_depth, ...
    '$f_1$', ... % Incremental number as text
    'FontSize', 15, ... % Set font size
    'Color', 'red', ... % Text color
    'FontWeight', 'bold', ... % Bold font for visibility
    'Interpreter','Latex'); 

p13 = plot3(pos_y(h2_f_on:h2_f_off), pos_x(h2_f_on:h2_f_off), pos_z(h2_f_on:h2_f_off)+assumed_operational_depth, ...
    'linewidth', 4.5, 'HandleVisibility', 'off', 'Color', 'red'); % the swapping of x,y is intentional, compatible with the NED convention
text(pos_y(h2_f_on), ... %+(pos_y(h1_f_off)-pos_y(h1_f_on))/2+2*gamma, ...%pos_x(h1_f_on)+(pos_x(h1_f_off)-pos_x(h1_f_on))/2+2*gamma, ...
    pos_x(h2_f_on)+2, ...
    pos_z(h2_f_on)+assumed_operational_depth+2, ...
    '$f_2$', ... % Incremental number as text
    'FontSize', 14, ... % Set font size
    'Color', 'red', ... % Text color
    'FontWeight', 'bold', ... % Bold font for visibility
    'Interpreter','Latex'); 

p14 = plot3(pos_y(h3_f_on:h3_f_off), pos_x(h3_f_on:h3_f_off), pos_z(h3_f_on:h3_f_off)+assumed_operational_depth, ...
    'linewidth', 4.5, 'HandleVisibility', 'off', 'Color', 'red'); % the swapping of x,y is intentional, compatible with the NED convention
text(pos_y(h3_f_on)+gamma, ... %+(pos_y(h1_f_off)-pos_y(h1_f_on))/2+2*gamma, ...%pos_x(h1_f_on)+(pos_x(h1_f_off)-pos_x(h1_f_on))/2+2*gamma, ...
    pos_x(h3_f_on)+7, ...
    pos_z(h3_f_on)+assumed_operational_depth-4, ...
    '$f_3$', ... % Incremental number as text
    'FontSize', 14, ... % Set font size
    'Color', 'red', ... % Text color
    'FontWeight', 'bold', ... % Bold font for visibility
    'Interpreter','Latex'); 

p15 = plot3(pos_y(h4_f_on:h4_f_off), pos_x(h4_f_on:h4_f_off), pos_z(h4_f_on:h4_f_off)+assumed_operational_depth, ...
    'linewidth', 4.5, 'HandleVisibility', 'off', 'Color', 'red'); % the swapping of x,y is intentional, compatible with the NED convention
text(pos_y(h4_f_on)+gamma, ... %+(pos_y(h1_f_off)-pos_y(h1_f_on))/2+2*gamma, ...%pos_x(h1_f_on)+(pos_x(h1_f_off)-pos_x(h1_f_on))/2+2*gamma, ...
    pos_x(h4_f_on), ...
    pos_z(h4_f_on)+assumed_operational_depth+2, ...
    '$f_4$', ... % Incremental number as text
    'FontSize', 14, ... % Set font size
    'Color', 'red', ... % Text color
    'FontWeight', 'bold', ... % Bold font for visibility
    'Interpreter','Latex'); 
light

legend([p1, p10, p2, p6], 'Interpreter','Latex','FontSize', 14, 'Location', 'Best') 
view([-20 20])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 


%% Draw AUV -- reaching phase
figure;

% draw monopile
r = r_c; n = 100;   
[X,Y,Z] = cylinder(r);
X = X+c_c(1); Y = Y+c_c(2); Z = Z*h_c - c_c(3)+5;
surf(X,Y,Z,'facecolor',rgb_monopile,'LineStyle','none', 'FaceAlpha',0.5, 'HandleVisibility', 'off'); %[0.6510  0.6510  0.6510]
hold on
fill3(X(1,:),Y(1,:),Z(1,:),rgb_monopile, 'HandleVisibility', 'off') % this is the top "closing" element of the monopile
fill3(X(2,:),Y(2,:),Z(2,:),rgb_monopile, 'HandleVisibility', 'off') % this is the bottom "closing" element of the monopile
hold on; 

p2 = plotWaypointAUVPlot(0, 0, z_wp(1)+assumed_operational_depth, radius_waypoint, gamma, alpha_waypoints, rgb_green, true); % the swapping of x,y is intentional, compatible with the NED convention
hold on
p1 = plotWaypointAUVPlot(y_wp(1), x_wp(1), z_wp(1)+assumed_operational_depth, radius_waypoint, gamma, alpha_waypoints, rgb_waypoints, false); % the swapping of x,y is intentional, compatible with the NED convention
hold on


% plot path
p3 = plot3(pos_y(1:h3_f_on), pos_x(1:h3_f_on), pos_z(1:h3_f_on)+assumed_operational_depth, 'linewidth', 1.5, 'HandleVisibility', 'on', 'Color', 'blue', 'DisplayName','AUV path'); % the swapping of x,y is intentional, compatible with the NED convention
titleHandle = title('AUV reaching','Interpreter','Latex', 'HandleVisibility','off')
grid on;
xlabel('$y\ [m]$','Interpreter','Latex','FontSize', 15);
ylabel('$x\ [m]$','Interpreter','Latex','FontSize', 15);
zlabel('$z\ [m]$','Interpreter','Latex','FontSize', 15);
hold on

% plot AUVs
[Xe1,Ye1,Ze1] = ellipsoid(pos_y(h1_f_off), ...
        pos_x(h1_f_off), ...
        assumed_operational_depth, 2, 1, 1, 100); %x, y, z

surf3=surf(Xe1-5,Ye1+5.5,Ze1,...
     'FaceAlpha', 1.0, ...
     'FaceColor', rgb_auv, ...
     'HandleVisibility', 'off', ...
     'LineStyle','none'); %,...
     % 'EdgeColor','none');
direction = [0 0 1];
rotate(surf3,direction,35)

text(11.62-5, 7.77+3, assumed_operational_depth, ...
    'AUV', ... % Incremental number as text
    'FontSize', 14, ... % Set font size
    'Color', 'black', ... % Text color
    'FontWeight', 'bold', ... % Bold font for visibility
    'Interpreter','Latex'); 

% Draw the camera cone
% Parameters for the cone
radius = 3;       % Radius of the base
height = 8;       % Height of the cone
vertex = [11.62, 7.77, assumed_operational_depth]; % Location of the vertex of the cone
direction = [0.6, 0.4, 0]; % Direction vector for the cone (normalized)

% Generate the cone geometry
theta = linspace(0, 2*pi, 50); % Angle for the circular base
z = linspace(0, height, 50);   % Height of the cone
[Theta, Z] = meshgrid(theta, z); % Create grid for the cone

% Parametric equations for the cone (starting from the vertex)
X = Z / height * radius .* cos(Theta); % Linearly increases radius
Y = Z / height * radius .* sin(Theta); % Linearly increases radius
Z = Z; % Height remains as is

% Rotate the cone to align with the desired direction
% Normalize the desired direction
direction = direction / norm(direction);
z_axis = [0, 0, 1];
rotation_axis = cross(z_axis, direction);
rotation_angle = acos(dot(z_axis, direction));
if norm(rotation_axis) > 1e-6
    rotation_matrix = axang2rotm([rotation_axis/norm(rotation_axis), rotation_angle]);
else
    rotation_matrix = eye(3); % No rotation needed if aligned
end

% Apply the rotation to the cone points
cone_points = [X(:), Y(:), Z(:)] * rotation_matrix';
X_rot = reshape(cone_points(:, 1), size(X));
Y_rot = reshape(cone_points(:, 2), size(Y));
Z_rot = reshape(cone_points(:, 3), size(Z));

% Translate the cone to place its vertex at the desired location
X_rot = X_rot + vertex(1);
Y_rot = Y_rot + vertex(2);
Z_rot = Z_rot + vertex(3);

% Plot the cone
surf(X_rot, Y_rot, Z_rot, 'EdgeColor', 'none',...
     'FaceAlpha', 0.4, ...
     'FaceColor', rgb_yellow, ...
     'HandleVisibility', 'off', ...
     'LineStyle','none'); %,...
     %'DisplayName', 'camera cone');
hold on 

% Sea surface
% Parameters for the wavy surface
center = [18, 18, 0]; % Center of the square
side_length = 40;     % Side length of the square
color = [0.5, 0.8, 1]; % Light blue color (RGB)
amplitude = 0.5;       % Wave amplitude
frequency = 2;         % Wave frequency
wave_speed = 0;        % Set to 0 for static waves (you can animate by modifying this)

% Generate grid for the surface
half_side = side_length / 2;
x = linspace(center(1) - half_side, center(1) + half_side, 100); % Fine grid for waves
y = linspace(center(2) - half_side, center(2) + half_side, 100);
[X, Y] = meshgrid(x, y);

% Generate wave-like height values (z)
Z = center(3) + amplitude * sin(frequency * (X + Y) + wave_speed);

% Plot the wavy surface
surf(X, Y, Z, 'EdgeColor', 'none', 'FaceColor', color, 'FaceAlpha', 0.3);
colormap(color); % Light blue color
shading interp;  % Smooth shading

xlim([-3, 40]);
ylim([-3, 40]);

light 
legend([p2, p1], 'FontSize', 14)
view([75 20])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 



%% Draw AUV -- inspecting phase
figure;
time_AUV = h3_f_off-10000;

% draw monopile
r = r_c; n = 100;   
[X,Y,Z] = cylinder(r);
X = X+c_c(1); Y = Y+c_c(2); Z = Z*h_c - c_c(3)+5;
surf(X,Y,Z,'facecolor',rgb_monopile,'LineStyle','none', 'FaceAlpha',0.5, 'HandleVisibility', 'off'); %[0.6510  0.6510  0.6510]
hold on
fill3(X(1,:),Y(1,:),Z(1,:),rgb_monopile, 'HandleVisibility', 'off') % this is the top "closing" element of the monopile
fill3(X(2,:),Y(2,:),Z(2,:),rgb_monopile, 'HandleVisibility', 'off') % this is the bottom "closing" element of the monopile
hold on; 

p1 = plotWaypoint(y_wp(1:4), x_wp(1:4), z_wp(1:4)+assumed_operational_depth, radius_waypoint, gamma, alpha_waypoints, rgb_waypoints, false); % the swapping of x,y is intentional, compatible with the NED convention
hold on

% plot path
p3 = plot3(pos_y(h2_f_on:h4_f_on), pos_x(h2_f_on:h4_f_on), pos_z(h2_f_on:h4_f_on)+assumed_operational_depth, 'linewidth', 1.5, 'HandleVisibility', 'on', 'Color', 'blue', 'DisplayName','AUV path'); % the swapping of x,y is intentional, compatible with the NED convention
titleHandle = title('AUV inspecting','Interpreter','Latex', 'HandleVisibility','off')
grid on;
xlabel('$y\ [m]$','Interpreter','Latex','FontSize', 15);
ylabel('$x\ [m]$','Interpreter','Latex','FontSize', 15);
zlabel('$z\ [m]$','Interpreter','Latex','FontSize', 15);
hold on

% plot AUVs
[Xe1,Ye1,Ze1] = ellipsoid(pos_y(time_AUV), ...
        pos_x(time_AUV), ...
        assumed_operational_depth, 2, 1, 1, 100); %x, y, z

surf3=surf(Xe1,Ye1,Ze1,...
     'FaceAlpha', 1.0, ...
     'FaceColor', rgb_auv, ...
     'HandleVisibility', 'off', ...
     'LineStyle','none'); %,...
     % 'EdgeColor','none');
direction = [0 0 1];
rotate(surf3,direction,0); %rad2deg(h3_f_off)

text(18.5, 31, assumed_operational_depth, ...
    'AUV', ... % Incremental number as text
    'FontSize', 14, ... % Set font size
    'Color', 'black', ... % Text color
    'FontWeight', 'bold', ... % Bold font for visibility
    'Interpreter','Latex'); 

% Draw the camera cone
% Parameters for the cone
radius = 3;       % Radius of the base
height = 8;       % Height of the cone
vertex = [23.54, 31.13, assumed_operational_depth]; % Location of the vertex of the cone
direction = [0.5, 0.0, 0]; % Direction vector for the cone (normalized)

% Generate the cone geometry
theta = linspace(0, 2*pi, 50); % Angle for the circular base
z = linspace(0, height, 50);   % Height of the cone
[Theta, Z] = meshgrid(theta, z); % Create grid for the cone

% Parametric equations for the cone (starting from the vertex)
X = Z / height * radius .* cos(Theta); % Linearly increases radius
Y = Z / height * radius .* sin(Theta); % Linearly increases radius
Z = Z; % Height remains as is

% Rotate the cone to align with the desired direction
% Normalize the desired direction
direction = direction / norm(direction);
z_axis = [0, 0, 1];
rotation_axis = cross(z_axis, direction);
rotation_angle = acos(dot(z_axis, direction));
if norm(rotation_axis) > 1e-6
    rotation_matrix = axang2rotm([rotation_axis/norm(rotation_axis), rotation_angle]);
else
    rotation_matrix = eye(3); % No rotation needed if aligned
end

% Apply the rotation to the cone points
cone_points = [X(:), Y(:), Z(:)] * rotation_matrix';
X_rot = reshape(cone_points(:, 1), size(X));
Y_rot = reshape(cone_points(:, 2), size(Y));
Z_rot = reshape(cone_points(:, 3), size(Z));

% Translate the cone to place its vertex at the desired location
X_rot = X_rot + vertex(1);
Y_rot = Y_rot + vertex(2);
Z_rot = Z_rot + vertex(3);

% Plot the cone
surf(X_rot, Y_rot, Z_rot, 'EdgeColor', 'none',...
     'FaceAlpha', 0.4, ...
     'FaceColor', rgb_yellow, ...
     'HandleVisibility', 'off', ...
     'LineStyle','none'); %,...
     %'DisplayName', 'camera cone');
hold on 

% % Sea surface
% % Parameters for the wavy surface
% center = [18, 18, 0]; % Center of the square
% side_length = 40;     % Side length of the square
% color = [0.5, 0.8, 1]; % Light blue color (RGB)
% amplitude = 0.5;       % Wave amplitude
% frequency = 2;         % Wave frequency
% wave_speed = 0;        % Set to 0 for static waves (you can animate by modifying this)
% 
% % Generate grid for the surface
% half_side = side_length / 2;
% x = linspace(center(1) - half_side, center(1) + half_side, 100); % Fine grid for waves
% y = linspace(center(2) - half_side, center(2) + half_side, 100);
% [X, Y] = meshgrid(x, y);
% 
% % Generate wave-like height values (z)
% Z = center(3) + amplitude * sin(frequency * (X + Y) + wave_speed);
% 
% % Plot the wavy surface
% surf(X, Y, Z, 'EdgeColor', 'none', 'FaceColor', color, 'FaceAlpha', 0.3);
% colormap(color); % Light blue color
% shading interp;  % Smooth shading

xlim([10, 40]);
ylim([10, 40]);

light 
legend([p1], 'FontSize', 14)
view([-125 40.06])
if hide_titles
    set(titleHandle, 'Visible', 'off');
end 



%% Saving results
saveOpenFigures_v3(saving_results_path, pwd, true);


%% 
%The next plot needs to be closed automatically
close all

% Actuator efficiency
figure;
subplot(4,1,1)
plot(time, h1,'linewidth', 1.5);
hold on 
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$h_1$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
grid on;
set(gcf,'color','w');
% titleHandle = title('Actuators efficiency','Interpreter','Latex')
xlim([0 end_sim])

subplot(4,1,2)
plot(time, h2,'linewidth', 1.5);
hold on 
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$h_2$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
grid on;
set(gcf,'color','w');
xlim([0 end_sim])

subplot(4,1,3)
plot(time, h3,'linewidth', 1.5);
hold on 
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$h_3$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
grid on;
set(gcf,'color','w');
xlim([0 end_sim])


subplot(4,1,4)
plot(time, h4,'linewidth', 1.5);
hold on 
xlabel('$time\ [s]$','Interpreter','Latex','FontSize', 15);
ylabel('$h_4$','Interpreter','Latex','FontSize', 15);
set(gca,'TickLabelInterpreter','Latex');
grid on;
set(gcf,'color','w');
xlim([0 end_sim])


